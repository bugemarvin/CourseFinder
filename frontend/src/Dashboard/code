
const [lastPage, setLastPage] = useState(1);
const [jumpPage, setJumpPage] = useState(1);


<Container className="footers">
  {lastPage > 1 && (
    <div className="Pagination">
      <Button
        variant="primary tl_btns"
        onClick={() => setPage(page - 1)}
        disabled={page === 1}
      >
        Previous Page
      </Button>
      {Array.from({ length: lastPage }, (_, i) => i + 1)
        .filter(
          (pageNum) =>
            pageNum === 1 ||
            pageNum === lastPage ||
            Math.abs(page - pageNum) <= 2
        )
        .map((pageNum) => (
          <Button
            key={pageNum}
            variant="outline-primary tl_btns"
            onClick={() => setPage(pageNum)}
            active={pageNum === page}
          >
            {pageNum}
          </Button>
        ))}
      <Button
        variant="primary tl_btns"
        onClick={() => setPage(page + 1)}
        disabled={page === lastPage}
      >
        Next Page
      </Button>
      <InputGroup className="ml-3" style={{ width: "100px" }}>
        <Form.Control
          type="number"
          min="1"
          max={lastPage}
          value={jumpPage}
          onChange={(e) => setJumpPage(e.target.value)}
        />
        <InputGroup.Append>
          <Button
            variant="outline-primary"
            onClick={() => {
              if (jumpPage >= 1 && jumpPage <= lastPage) {
                setPage(jumpPage);
              }
            }}
          >
            Go
          </Button>
        </InputGroup.Append>
      </InputGroup>
    </div>
  )}
  </Container>